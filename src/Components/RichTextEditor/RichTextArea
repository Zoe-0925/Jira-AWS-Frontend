import React from "react"
import { Editor, RichUtils } from "draft-js";
import { Row} from 'reactstrap';
import BlockStyleToolbar, { getBlockStyle } from "./BlockStyles/BlockStyleToolbar";
import { colorStyleMap, ColorControls } from "./Colors"
import Button from "@material-ui/core/Button"
import ButtonGroup from "@material-ui/core/ButtonGroup"

const RichTextArea = ({ editorState, setEditorState }) => {

    const handleKeyCommand = command => {
        const newState = RichUtils.handleKeyCommand(editorState, command);
        if (newState) {
            setEditorState(newState)
            return "handled";
        }
        return "not-handled";
    };

    const onUnderlineClick = () => {
        setEditorState(
            RichUtils.toggleInlineStyle(editorState, "UNDERLINE")
        );
    };

    const onBoldClick = () => {
        setEditorState(RichUtils.toggleInlineStyle(editorState, "BOLD"));
    };

    const onItalicClick = () => {
        setEditorState(RichUtils.toggleInlineStyle(editorState, "ITALIC"));
    };

    const onStrikeThroughClick = () => {
        setEditorState(RichUtils.toggleInlineStyle(editorState, "STRIKETHROUGH"));
    };

    const toggleBlockType = (blockType) => {
        setEditorState(RichUtils.toggleBlockType(editorState, blockType));
    };

    /** 
    const toggleColor = (toggledColor) => {
        const selection = editorState.getSelection();

        // Allow one color at a time.
        const nextContentState = Object.keys(colorStyleMap)
            .reduce((contentState, color) => {
                return Modifier.removeInlineStyle(contentState, selection, color)
            }, editorState.getCurrentContent());

        let nextEditorState = EditorState.push(
            editorState,
            nextContentState,
            'change-inline-style'
        );

        const currentStyle = editorState.getCurrentInlineStyle();

        // Unset style override for current color.
        if (selection.isCollapsed()) {
            nextEditorState = currentStyle.reduce((state, color) => {
                return RichUtils.toggleInlineStyle(state, color);
            }, nextEditorState);
        }

        // If the color is being toggled on, apply it.
        if (!currentStyle.has(toggledColor)) {
            nextEditorState = RichUtils.toggleInlineStyle(
                nextEditorState,
                toggledColor
            );
        }

        this.onChange(nextEditorState);
    }
*/
    return (
        <div className="rich-text-editor">
            <Row className="tool-bar">
        
                    <BlockStyleToolbar
                        editorState={editorState}
                        onToggle={toggleBlockType}
                    />
                    <ButtonGroup size="medium" aria-label="small outlined button group">
                        <Button className="rich-text-editor-btn" onClick={onUnderlineClick}>U</Button>
                        <Button className="rich-text-editor-btn" onClick={onBoldClick}><b>B</b></Button>
                        <Button className="rich-text-editor-btn" onClick={onItalicClick}><em>I</em></Button>
                        <Button className="strikethrough" onClick={onStrikeThroughClick}> <s>S</s></Button>
                    </ButtonGroup>
               
            </Row>

            <Editor
                editorState={editorState}
                onChange={setEditorState}
                handleKeyCommand={handleKeyCommand}
                blockStyleFn={getBlockStyle}
                customStyleMap={colorStyleMap}
                wrapperClassName="wrapper-class"
                editorClassName="editor-class"
                toolbarClassName="toolbar-class"
            />
        </div>)
}

export default RichTextArea


/**
 *              <ColorControls
                        editorState={editorState}
                        onToggle={this.toggleColor}
                    />

 */